@using System.Linq
@using Foosball.Models.FoosballModels
@model Foosball.Models.FoosballModels.Game

@{
    ViewBag.Title = "Create";
}
@Scripts.Render("~/bundles/jqueryui")
@Scripts.Render("~/bundles/jqueryval")

@*Created by Ferenc Hammerl*@

@using (Html.BeginForm())
{
    <div class="jumbotron jumbo-marpad">
        <h2>Create game</h2>
        @Html.AntiForgeryToken()

        <div class="row">

            <ul id="winners" class="list-group col-xs-4">
                <li class="list-group-item list-group-item-success">Winners <span id="winnersFull" class="glyphicon glyphicon-ok" aria-hidden="true" style="float:right"></span></li>
            </ul>

            <div id="i" class="list-group col-xs-4">

                <h4 style="text-align: center">Player's Name</h4>
                <input id="playername" class=" col-xs-4 form-control" style="max-width: initial;display:table;
   margin:auto;" value="@ViewBag.un">
                <a id="winners-btn" class="btn btn-primary btn-insert col-xs-4" onclick="addPlayer('#winners') "><<</a>
                <div class="col-xs-4"></div>
                <a id="losers-btn" class="btn btn-primary btn-insert col-xs-4" onclick="addPlayer('#losers') ">>></a>
            </div>

            <ul id="losers" class="list-group col-xs-4">
                <li class="list-group-item list-group-item-danger">Losers<span id="losersFull" class="glyphicon glyphicon-ok" aria-hidden="true" style="float:right"></span></li>
            </ul>
        </div>
        <div class="row">
            <div class="form-group text-center">
                @Html.LabelFor(model => model.LocationId, "LocationId", htmlAttributes: new { @class = "col-md-2 text-center" })
                <div class="col-md-10">
                    @Html.DropDownList("LocationId", null, htmlAttributes: new {@class = "form-control"})
                    @Html.ValidationMessageFor(model => model.LocationId, "", new {@class = "text-danger"})
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="text-center">
                <input id="submitBut" type="submit" value="Create" class="btn btn-default" disabled />
            </div>
        </div>
        <div>
            @Html.ActionLink("Back", "Index", "Home")
        </div>
    </div>
    <script>
        var playerArray = @Html.Raw(Json.Encode(
            ((IEnumerable<SelectListItem>)ViewBag.PlayerId).Select(player => new
            {
                id=player.Value,
                name= player.Text
            })
        ));

        function getPlayerIdByName(playerName) {
            return playerArray.filter(function(x) {return x.name == playerName; })[0].id;
        }


        var arr = playerArray.map(function(x) { return x.name; });

        var dic = [];
        function setDicValue(key, value)
        {
            dic[key]=value;
            var buttonDisable;
            if (dic["#winners"] == dic["#losers"] && dic["#winners"] > 0)
                buttonDisable = false;
            else buttonDisable = true;
            $("#submitBut").attr("disabled", buttonDisable);
        }

        function pageInit()
        {
            $("#old").hide();
            $( "#playername" ).autocomplete({
                source: arr
            });
            //Counters for the player list
            dic["#winners"] = 0;
            dic["#losers"] = 0;

            $("#winnersFull").hide();
            $("#losersFull").hide();

            $("#submitBut").attr("disabled", true);
        }

        pageInit();


        function addPlayer(boxId)
        {
            //if the playername isn't in the array the return index is -1.
            if($.inArray($("#playername").val(), arr)===-1)
            {
                alert('Player Not found');
                return;
            }

            if (listIsFull(boxId)) { alert('The list seems to be full'); return;}


            var player = playerArray[getPlayerObjId($("#playername").val())];

            $(boxId).append(generateListItemWithPlayerId(player.id,boxId));

            $("#li_" + player.id).hide();
            $("#li_" + player.id).slideDown("normal");

            //remove player from autocomplete list
            var ind = arr.indexOf($("#playername").val());
            if(ind != -1) {
                arr.splice(ind, 1);
            }

            $("#playername").val('');

            //Count the players in each
            setDicValue(boxId, dic[boxId] + 1);

            listIsFull(boxId);

        }

        //checks if the list of losers/players is full and deactivates it
        function listIsFull(boxId) {
            if (dic[boxId] === 2) {
                deactivateBox(boxId);
                return true;
            }
            return false;
        }


        function deactivateBox(boxId)
        {
            $(boxId + "-btn").attr("disabled", true);
            $(boxId + "Full").show("normal");

        }
        function reactivate(boxId)
        {
            $(boxId + "-btn").attr("disabled", false);
            $(boxId + "Full").hide("normal");
        }
        function getPlayerObjId(playerName) {
            for (var i=0; i< playerArray.length;i++)
                if (playerArray[i].name === playerName) {
                    return i;}
        }
        //list-item factory, creates a player-item for list
        function generateListItemWithPlayerId(liId, boxId) {
            var generateInputBox = function() { return '<input type="hidden" name="' + boxId.substring(1) + '_' + dic[boxId] + '" value="' + getPlayerIdByName($("#playername").val()) + '">'; }
            return '<li id=li_' + liId + ' class="list-group-item">' +generateInputBox(boxId) +$("#playername").val()+ generateIcon(liId) + '</li>';
        }

        // remove-button factory for list-items
        function generateIcon(iId){return '<i id=i_' + iId + ' class="glyphicon glyphicon-remove-circle pull-right" onclick="deletePlayer(this)" style="font-size: 1.4em; cursor:pointer;"></i>';
        }

        //removes a list-item from the winner/loser list and add the player back to the dictionary
        function deletePlayer(self) {
            var boxId = "#" + $(self).parent().parent().attr('id');

            setDicValue(boxId, dic[boxId] - 1);
            reactivate(boxId);
            var a = $('#l' + $(self).attr('id'));
            arr.push(a.text());
            a.slideUp("normal", function() { $(this).remove(); } );
        }
    </script>



}

